
<div class="container">
    <div id="webcam-container"></div>
    <p id="label" style="font-size: 3rem;"></p>
    <div class="row">
        <button class="start" onclick="isStop = false">START</button>
        <button class="stop" onclick="isStop = true">STOP</button>
    </div>
</div>


<script src="/script/tf.min.js"></script>
<script src="/script/teachablemachine-image.min.js"></script>
<style>
    canvas {
        width: 600px;
        background-color: black;
    }
    body {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        width: 100%;
        height: 100%;
        background-color: #f3f3f3;
        .container {
            padding: 15px;
            display: flex;
            flex-direction: column;
            align-items: center;
            background-color: #fff;
            box-shadow: 0 0 10px 2px #ccc;
            border-radius: 8px;
            .row {
                display: flex;
                align-items: center;
                width: 100%;
                gap: 10px;
            }
            .start {
                background-color: #133E87;
                border: none;
                border-radius: 5px;
                color: #fff;
                width: 100%;
                height: 40px;
            }
            
            .stop {
                background-color: #F09319;
                border: none;
                border-radius: 5px;
                color: #fff;
                width: 100%;
                height: 40px;
            }
        }

        @media only screen and (max-width:800px) {
            canvas {
                width: 100%;
            }
            
        }
    }
</style>
<script type="text/javascript">
    let isStop = false
    const URL = "/";
    let model, webcam, maxPredictions;
    let label = document.getElementById("label")
    async function init() {
        const modelURL = URL + "model.json";
        const metadataURL = URL + "metadata.json";
        model = await tmImage.load(modelURL, metadataURL);
        maxPredictions = model.getTotalClasses();
        webcam = new tmImage.Webcam(200, 200, true);
        await webcam.setup();
        await webcam.play();
        window.requestAnimationFrame(loop);
        document.getElementById("webcam-container").appendChild(webcam.canvas);
    }

    async function loop() { 
        webcam.update();
        await predict();
        window.requestAnimationFrame(loop);
    }

    function sendMessage(data) {
        fetch('/send?message=' + data)
        .then(response => response.json())
        .then(data => console.log('Message Sent: ' + data.message))
        .catch(err => console.log('Error: ' + err))
    }

    async function predict() {
        const prediction = await model.predict(webcam.canvas);
        for (let i = 0; i < maxPredictions; i++) {
            if(prediction[i].probability.toFixed(0) == 1){
                label.innerHTML = prediction[i].className
                if(i == 0 || i == 1) sendMessage("S");
                else if(i == 2) sendMessage("M");
                else if(i == 3) sendMessage("L");
                setTimeout(() => {
                    
                }, 100);
            }
        }
    }
    init()
</script>

